# Default values for enabler.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# String to partially override enabler.fullname template (will maintain the release name).
nameOverride: ""
# String to fully override enabler.fullname template.
fullnameOverride: ""
# Deploy all the components in specific K8s node(s).
enablerNodeSelector: {}
# Cilium Multi-cluster global service.
globalService: false

tags:
  pilot: false

serviceAccountName: asdo
# Component apigateway values.
apigateway:
  tier: external
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: devopsfaith/krakend
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
    pullPolicy: IfNotPresent
  
  # Configuration of the service: type and ports.
  service:
    type: NodePort
    ports:
      http:
        port: 8080
        targetPort: 8080
        containerPort: 8080
        nodePort: 30782
        protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in containers section of the component's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.


  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component cluster values.
cluster:
  tier: internal
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: assistiot/smart-orchestrator_cluster
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
    pullPolicy: IfNotPresent
  
  # Configuration of the service: type and ports.
  service:
    type: ClusterIP
    ports:
      cluster:
        port: 5002
        targetPort: 5002
        containerPort: 5002
        nodePort: ""
        protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in containers section of the component's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.

  volumes:
    pv:
      name: pv-volume-cluster
      accessMode: ReadWriteMany
      size: 100Mi
      storageClassName: cluster
      path: /home/fmbiot
    pvc:
      name: pv-claim-cluster
      accessMode: ReadWriteMany
      size: 100Mi
      storageClassName: cluster

  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {
    "node-role.kubernetes.io/master":"yes"
  }
  tolerations: []
  affinity: {}

# Component enabler values.
enablers:
  tier: internal
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: assistiot/smart-orchestrator_enabler
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
    pullPolicy: IfNotPresent
  
  # Configuration of the service: type and ports.
  service:
    type: ClusterIP
    ports:
      enablers:
        port: 5004
        targetPort: 5004
        containerPort: 5004
        nodePort: ""
        protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in containers section of the component's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.


  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component repository values.
repository:
  tier: internal
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: assistiot/smart-orchestrator_repository
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
    pullPolicy: IfNotPresent
  
  # Configuration of the service: type and ports.
  service:
    type: ClusterIP
    ports:
      repo:
        port: 5003
        targetPort: 5003
        containerPort: 5003
        nodePort: ""
        protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in containers section of the component's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.
  envVars:
    exampleEnvVar: exampleValue


  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component helm values.
helm:
  tier: internal
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: assistiot/smart-orchestrator_helm
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
    pullPolicy: IfNotPresent
  
  # Configuration of the service: type and ports.
  service:
    type: ClusterIP
    ports:
      helm:
        port: 9888
        targetPort: 9888
        containerPort: 9888
        nodePort: ""
        protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in containers section of the component's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.
  envVars:
    repoDir: /root/.config/helm/repositories.yaml
    cacheDir: /root/.cache/helm/repository
    config: /root/.kube/config


  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}

  volumes:
    pvc:
      name: pvc-helm
      accessMode: ReadWriteOnce
      size: 100Mi

# Component scheduler values.
scheduler:
  tier: internal
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: assistiot/smart-orchestrator_scheduler
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
    pullPolicy: IfNotPresent
  
  # Configuration of the service: type and ports.
  service:
    type: ClusterIP
    ports:
      scheduler:
        port: 5000
        targetPort: 5000
        containerPort: 5000
        nodePort: ""
        protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in containers section of the component's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.
  envVars:
    exampleEnvVar: exampleValue


  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}
  prediction:
    mysql:
      tier: internal
      image:
        repository: mysql
        pullPolicy: IfNotPresent
        # Overrides the image tag whose default is the chart appVersion.
        tag: "5.7"

      replicaCount: 1
      service:
        type: ClusterIP
        ports:
          mysql:
            port: 3306
            targetPort: 3306
            containerPort: 3306
            nodePort: ""
            protocol: TCP


      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      resources: {}
        # limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi

      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 3
        targetCPUUtilizationPercentage: 80
        # targetMemoryUtilizationPercentage: 80

      podSecurityContext: {}
        # fsGroup: 2000

      securityContext: {}
        # capabilities:
        #   drop:
        #   - ALL
        # readOnlyRootFilesystem: true
        # runAsNonRoot: true
        # runAsUser: 1000

      envVars:
        data: data
        root: root
        user: scheduler-user
        password: scheduler-password

      persistence:
        accessModes:
          - ReadWriteOnce
        size: 1Gi
    mc:
      tier: internal
      image:
        repository: assistiot/smart-orchestrator_scheduler_mc
        pullPolicy: IfNotPresent
        # Overrides the image tag whose default is the chart appVersion.
        tag: "latest"

      replicaCount: 1
    
      schedule: "*/15 * * * *"

      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      resources: {}
        # limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi

      podSecurityContext: {}
        # fsGroup: 2000

      securityContext: {}
        # capabilities:
        #   drop:
        #   - ALL
        # readOnlyRootFilesystem: true
        # runAsNonRoot: true
        # runAsUser: 1000
      envVars:
        promPort: 9090

      restartPolicy: Never 
    tm:
      tier: internal
      image:
        repository: assistiot/smart-orchestrator_scheduler_tm
        pullPolicy: IfNotPresent
        # Overrides the image tag whose default is the chart appVersion.
        tag: "latest"

      replicaCount: 1
    
      schedule: "5 0 * * *"

      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      resources: {}
        # limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi

      podSecurityContext: {}
        # fsGroup: 2000

      securityContext: {}
        # capabilities:
        #   drop:
        #   - ALL
        # readOnlyRootFilesystem: true
        # runAsNonRoot: true
        # runAsUser: 1000
      restartPolicy: Never
      envVars:
        historydata: 7
        futuredata: 7

# Component multiclusterservice values.
multiclusterservice:
  tier: internal
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: assistiot/smart-orchestrator_mcs
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
    pullPolicy: IfNotPresent
  
  # Configuration of the service: type and ports.
  service:
    type: NodePort
    ports:
      port1:
        port: 80
        targetPort: 80
        containerPort: 80
        nodePort: ""
        protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in containers section of the component's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.
  


  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component db values.
db:
  tier: internal
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: mongo
    # Overrides the image tag whose default is the chart appVersion.
    tag: "4.4.6"
    pullPolicy: IfNotPresent
  
  # Configuration of the service: type and ports.
  service:
    type: ClusterIP
    ports:
      db:
        port: 27017
        targetPort: 27017
        containerPort: 27017
        nodePort: ""
        protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in containers section of the component's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.
  # Component data persistence
  persistence:
    enabled: true
    existingClaim: ""
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 50Mi

  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component car values.
car:
  tier: internal
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: gitlab.assist-iot.eu:5050/enablers-registry/public/asdo/car
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.0.7"
    pullPolicy: IfNotPresent
  
  # Configuration of the service: type and ports.
  service:
    type: ClusterIP
    ports:
      car:
        port: 5005
        targetPort: 5005
        containerPort: 5005
        nodePort: ""
        protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in containers section of the component's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.
  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}

  envVars:
    mqttPort: 1883
    fiwarePort: 1026

# Component ftedb values.
ftedb:
  tier: internal
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: gitlab.assist-iot.eu:5050/enablers-registry/public/pilot3a/ftebd
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
    pullPolicy: IfNotPresent
  

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in containers section of the component's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.

  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}

  envVars:
    mqttPort: 1883
    ftPort: 9092

# Component ftngsi values.
ftngsi:
  tier: internal
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: gitlab.assist-iot.eu:5050/enablers-registry/public/pilot3a/ftngsi
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
    pullPolicy: IfNotPresent
  

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in containers section of the component's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.

  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}

  envVars:
    fiwarePort: 1026
    ftPort: 9092

# Component ftltse values.
ftltse:
  tier: internal
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: gitlab.assist-iot.eu:5050/enablers-registry/public/pilot3a/ftltse
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}

  envVars:
    ltseIndexObm: obm
    ltseIndexDrivelet: drivelet
    ltsePort: 8080

pilot:
  tier: internal
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: gitlab.assist-iot.eu:5050/enablers-registry/public/pilot3a/pilotbackend
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.0.4"
    pullPolicy: IfNotPresent
  
  # Configuration of the service: type and ports.
  service:
    type: ClusterIP
    ports:
      pilot:
        port: 8974
        targetPort: 8974
        containerPort: 8974
        nodePort: "8974"
        protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in containers section of the component's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.
  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}

  envVars:
    SEM_REPO_EXT: "https://semrepo.satrd-cpd1.imm.upv.es/v1/m"
    PORT: 8974
    ltsePort: 8080
    semRepoPort: 80

# Default values for fluentd.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

fluentd:
  tier: external
  image:
    repository: fluent/fluentd-kubernetes-daemonset
    tag: v1.16-debian-elasticsearch7-1

  envVars:
    - name: FLUENT_ELASTICSEARCH_PORT
      value: "8080"
    - name: FLUENT_ELASTICSEARCH_PATH
      value: "/nosql/api"
    - name: FLUENT_ELASTICSEARCH_SCHEME
      value: "http"
    - name: FLUENTD_SYSTEMD_CONF
      value: disable
    - name: FLUENT_ELASTICSEARCH_USER
      value: ""
    - name: FLUENT_ELASTICSEARCH_PASSWORD
      value: ""
    - name: FLUENT_ELASTICSEARCH_LOG_ES_400_REASON
      value: "true"

  volumeMounts:
    - name: varlog
      mountPath: /var/log
    - name: varlibdockercontainers
      mountPath: /var/lib/docker/containers
      readOnly: true

  terminationGracePeriodSeconds: 30

  volumes:
    - name: varlog
      hostPath:
        path: /var/log
    - name: varlibdockercontainers
      hostPath:
        path: /var/lib/docker/containers

indexcountry:
  imagePullSecrets: []
  image:
    repository: gitlab.assist-iot.eu:5050/enablers-registry/public/pilot3a/indexingcountry
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.0.2"
    pullPolicy: IfNotPresent

  restartPolicy: Never
  backoffLimit: 6

  # CronJob scheduling config.
  schedule: "0 0 * * *"

  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  podSecurityContext: {}
  securityContext: {}

  # Include here the environment variables to be used in containers section of the job's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.
  envVars:
    threshold: 60
    carindex: obm
  # Configure this parameters to deploy the job in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}